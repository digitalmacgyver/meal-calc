TODO:

2. Update populate.py to use Paul's nutrition spreadsheet.
   * Do we need to add a "presentation name" column to things?

3. Update fitness function to lump together the quantities in Paul's
thing.

4. Re-create database with fewer nutrients.

4.5. Do some local performance testing.

5. Push new DB to production.

6. Verify scipi is working on the site.

7. Reach out to guy from Mona's thing, set up time for him, Paul, and
I to all talk.

--

Then, in no order:
* Put food in groups
* Recreate database with only food items of interest.

* Create simple form that inputs calories, then iteratively consumes
  food items, and prints out what the meal so far is.

---

b 172

constraints[0]['fun'].__closure__[1].cell_contents



---

Docs on the numpy/scipy buildpack I added:
https://github.com/thenovices/heroku-buildpack-scipy
heroku config:set BUILDPACK_URL=https://github.com/thenovices/heroku-buildpack-scipy

Docs on the DB transfer tool I'm using:
https://github.com/ddollar/heroku-pg-transfer


python manage.py shell

or 
import django
django.setup()


psql -h localhost -U zinc_saucier -d foodb


---


====

INSTALL NOTES:

Extended from the guide at:
http://www.marinamele.com/2013/12/how-to-set-django-app-on-heroku-part-i.html

1. Greated a git repository:

mkdir foo
cd foo
git init
git add .
git commit -m "initial commit"
Create repository on github web UI, copy repo link.
Edit .git/config to have the SSH version of the repo target.
git push master origin (or something like that)

2. Create a virtualenv:

virtualenv --no-site-packages env
source env/bin/activate

3. Install postgres (one time per server)

sudo apt-get install postgresql postgresql-contrib
sudo -u postgres psql postgres
\password postgres
Password = robochef

sudo apt-get install postgresql-server-dev

More details at:
https://help.ubuntu.com/community/PostgreSQL

4. Install Python packages:

sudo apt-get install python-psycopg2
sudo apt-get install libpq-dev

pip install django
pip install django-toolbelt

5. 
django-admin.py startproject my_project_name .

6. Create a database in Postgres:

sudo su - postgres

Create a database user:
createuser -D -A -P myuser
Provide a password.

-D - no database creation rights
-A - no user add rights
-P - prompt for password

Then:
createdb -O myuser db_name

I did:
Database name: foodb
User: zinc_saucier
Password: zinc_saucier

psql
CREATE EXTENSION adminpack;

7. Set up network logins:

Edit /etc/postgresql/9.3/main/postgresql.conf and uncomment listen_addresses = 'localhost'

8. Restart the server:

sudo /etc/init.d/postgresql reload
sudo /etc/init.d/postgresql restart

9. Verify you can log in:

psql -h localhost -U myuser -d dbname

You will be prompted for the user's password.

10. Update settings.py DATABASES to be:

import dj_database_url
DATABASES = { 
    'default' : dj_database_url.config( default='postgres://zinc_saucier:zinc_saucier@localhost:5432/foodb' ) 
}

11. Set up Heroku stuff:

* Add to end of settings.py
SECURE_PROXY_SSL_HEADER = ( 'HTTP_X_FORWARDED_PROTO', 'https' )

* Change the STATIC content part of settings.py to:

STATIC_ROOT = 'staticfiles'
STATIC_URL = '/static/'
# Note the trailing comma to confirm that forces this to be a tuple.
STATICFILES_DIRS = ( os.path.join( BASE_DIR, 'static' ), )

* Change BASE_DIR to:
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

* Add to settings.py:
# Allow all host headers
ALLOWED_HOSTS = ['*']

* Edit wsgi.py to have:

from django.core.wsgi import get_wsgi_application
from dj_static import Cling
application = Cling( get_wsgi_application() )

* Do this:
echo "web: gunicorn my_project_name.wsgi --log-file -" > Procfile

12. 
pip freeze > requirements.txt

13. Set up database stuff for inital apps:

python manage.py migrate

14. Make sure everything is working:

python manage.py runserver
Then visit localhost:8000 in a browser.
Then CTRL-C the process, and do:

foreman start
And then visiting localhost:5000 in a browser.
Then CTRL-C the process.

15. Create an app:

Run this command in the same directory as manage.py:
python manage.py startapp myapp

Add to settings.py INSTALLED_APPS:

...
'myapp',
...

17.

Create an Admin user:
python manage.py createsuperuser
I did:
ironchef
arcentat

python manage.py migrate

18.

Start the development server:

python manage.py runserver

Change the port / IP:
./manage.py runserver 1234
./manage.py runserver 10.0.0.1:1234

Development server automatically restarts when files change.

19. Once you have made some changes to models, you can sync them to
the database this way:

./manage.py makemigrations myapp

To see the SQL that will run:

./manage.py sqlmigrate myapp 0001 (or whatever the migration number is).

To list migrations:
./manage.py migrate -l
[X] indicates it has been applied already

To execute migrations:
./manage.py migate

==

Helpful URLs:


Django model reference:

https://docs.djangoproject.com/en/1.4/ref/models/fields/#django.db.models.ForeignKey


https://docs.djangoproject.com/en/1.4/ref/models/fields/#model-field-types

https://docs.djangoproject.com/en/1.4/topics/db/models/

Django setup guide:


http://realdjango.herokuapp.com/
http://www.jeffknupp.com/blog/2013/12/18/starting-a-django-16-project-the-right-way/

http://www.marinamele.com/2013/12/how-to-set-django-app-on-heroku-part-i.html

Postgres:
https://help.ubuntu.com/community/PostgreSQL

Field options:

OK - Django convention for forms is that empty TEXT type fields are
always represented as '', so they won't be null in the database.  We
should think about how adhering to this convention will go in our
database, as we'll end up potentially creating objects with NULL in a
column, but then the Django forms editor will store '' as the value,
and then joins, selects on field == NULL will break.

null=True (defaults to false)
blank=True (allow fields to be blank in the admin, defaults to false)

Overwrite the model's save function to preserve nulls in the form
admin:

def save(self, *args, **kwargs):
    for var in vars(self):
        if not var.startswith('_'):
            if self.__dict__[var] == '':
                self.__dict__[var] = None
    super(MyModel, self).save(*args, **kwargs)

--

CHOICES - you can populate from a database list:
   CHOICES = list ( (obj.code,obj.name) for obj in Scac.objects.all() )
Formmat is:
( database_field_value, form_display_anme )

You provide like this:
shirt_size = models.CharFIeld( max_length=1, choices=SHIRT_SIZE_CHOICES )

--

default, the default value for the object, can be value or callable

--

help_text - Extra text to be displayed in the form widget

--

primary_key - if set overrides the default integer PKs - I won't be using this.

--

unique - if true this is a UK

--

Each standard field name takes an optional first positional argument,
which is a verbose name.

Fields which are ForeignKey, ManyToMany, or OneToOne take a model
class as their first agument, so verbose names can be set with the
verbose_name="whee" parameter.

ForeignKey.to_field - the field the relation is to - defaults to the PK.

--
 
CLASS META OPTIONS:

Create an internal class called meta like:

class Foo( models.Model ):
      ...
      class Meta:
      	    ordering = ["created_date"]


Multiple key uniqueness:

unique_together = ( (cola,colb,colc ), (cola,cold) )

Multi column indices:
index_together = [
	       [ cola, colb ]
]

--

IN PYTHON 2, WE'LL GENERALLY WANT TO DEFINE THE __unicode__() method
on each class, to produce something readable when the object is
cohersed into a string.

CharField( max_lenght=3, ... )

DecimalField( max_digits=3, decimap_places=2, ... )
E.g. this would accomodate 1.23 but not 400 or 1.234.

IntegerField

NullBooleanField (boolean but NULL is permitted)

PositiveIntegerField

